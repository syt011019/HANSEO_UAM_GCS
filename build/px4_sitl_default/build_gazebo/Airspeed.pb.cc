// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Airspeed.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Airspeed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* Airspeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Airspeed_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Airspeed_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Airspeed_2eproto() {
  protobuf_AddDesc_Airspeed_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Airspeed.proto");
  GOOGLE_CHECK(file != NULL);
  Airspeed_descriptor_ = file->message_type(0);
  static const int Airspeed_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airspeed, time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airspeed, diff_pressure_),
  };
  Airspeed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Airspeed_descriptor_,
      Airspeed::default_instance_,
      Airspeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airspeed, _has_bits_[0]),
      -1,
      -1,
      sizeof(Airspeed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Airspeed, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Airspeed_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Airspeed_descriptor_, &Airspeed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Airspeed_2eproto() {
  delete Airspeed::default_instance_;
  delete Airspeed_reflection_;
}

void protobuf_AddDesc_Airspeed_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Airspeed_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Airspeed.proto\022\020sensor_msgs.msgs\"4\n\010Ai"
    "rspeed\022\021\n\ttime_usec\030\001 \002(\003\022\025\n\rdiff_pressu"
    "re\030\002 \002(\001", 88);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Airspeed.proto", &protobuf_RegisterTypes);
  Airspeed::default_instance_ = new Airspeed();
  Airspeed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Airspeed_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Airspeed_2eproto {
  StaticDescriptorInitializer_Airspeed_2eproto() {
    protobuf_AddDesc_Airspeed_2eproto();
  }
} static_descriptor_initializer_Airspeed_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Airspeed::kTimeUsecFieldNumber;
const int Airspeed::kDiffPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Airspeed::Airspeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.msgs.Airspeed)
}

void Airspeed::InitAsDefaultInstance() {
}

Airspeed::Airspeed(const Airspeed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.msgs.Airspeed)
}

void Airspeed::SharedCtor() {
  _cached_size_ = 0;
  time_usec_ = GOOGLE_LONGLONG(0);
  diff_pressure_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Airspeed::~Airspeed() {
  // @@protoc_insertion_point(destructor:sensor_msgs.msgs.Airspeed)
  SharedDtor();
}

void Airspeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Airspeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Airspeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Airspeed_descriptor_;
}

const Airspeed& Airspeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Airspeed_2eproto();
  return *default_instance_;
}

Airspeed* Airspeed::default_instance_ = NULL;

Airspeed* Airspeed::New(::google::protobuf::Arena* arena) const {
  Airspeed* n = new Airspeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Airspeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.msgs.Airspeed)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Airspeed, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Airspeed*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_usec_, diff_pressure_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Airspeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_msgs.msgs.Airspeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_usec = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
          set_has_time_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_diff_pressure;
        break;
      }

      // required double diff_pressure = 2;
      case 2: {
        if (tag == 17) {
         parse_diff_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diff_pressure_)));
          set_has_diff_pressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_msgs.msgs.Airspeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_msgs.msgs.Airspeed)
  return false;
#undef DO_
}

void Airspeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_msgs.msgs.Airspeed)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // required double diff_pressure = 2;
  if (has_diff_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->diff_pressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_msgs.msgs.Airspeed)
}

::google::protobuf::uint8* Airspeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.msgs.Airspeed)
  // required int64 time_usec = 1;
  if (has_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time_usec(), target);
  }

  // required double diff_pressure = 2;
  if (has_diff_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->diff_pressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.msgs.Airspeed)
  return target;
}

int Airspeed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sensor_msgs.msgs.Airspeed)
  int total_size = 0;

  if (has_time_usec()) {
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());
  }

  if (has_diff_pressure()) {
    // required double diff_pressure = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Airspeed::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.msgs.Airspeed)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 time_usec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time_usec());

    // required double diff_pressure = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Airspeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.msgs.Airspeed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Airspeed* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Airspeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.msgs.Airspeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.msgs.Airspeed)
    MergeFrom(*source);
  }
}

void Airspeed::MergeFrom(const Airspeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.msgs.Airspeed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_usec()) {
      set_time_usec(from.time_usec());
    }
    if (from.has_diff_pressure()) {
      set_diff_pressure(from.diff_pressure());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Airspeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.msgs.Airspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Airspeed::CopyFrom(const Airspeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.msgs.Airspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Airspeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Airspeed::Swap(Airspeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Airspeed::InternalSwap(Airspeed* other) {
  std::swap(time_usec_, other->time_usec_);
  std::swap(diff_pressure_, other->diff_pressure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Airspeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Airspeed_descriptor_;
  metadata.reflection = Airspeed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Airspeed

// required int64 time_usec = 1;
bool Airspeed::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Airspeed::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void Airspeed::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void Airspeed::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
 ::google::protobuf::int64 Airspeed::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Airspeed.time_usec)
  return time_usec_;
}
 void Airspeed::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Airspeed.time_usec)
}

// required double diff_pressure = 2;
bool Airspeed::has_diff_pressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Airspeed::set_has_diff_pressure() {
  _has_bits_[0] |= 0x00000002u;
}
void Airspeed::clear_has_diff_pressure() {
  _has_bits_[0] &= ~0x00000002u;
}
void Airspeed::clear_diff_pressure() {
  diff_pressure_ = 0;
  clear_has_diff_pressure();
}
 double Airspeed::diff_pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Airspeed.diff_pressure)
  return diff_pressure_;
}
 void Airspeed::set_diff_pressure(double value) {
  set_has_diff_pressure();
  diff_pressure_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Airspeed.diff_pressure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)
