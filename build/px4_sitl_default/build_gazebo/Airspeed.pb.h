// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Airspeed.proto

#ifndef PROTOBUF_Airspeed_2eproto__INCLUDED
#define PROTOBUF_Airspeed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sensor_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Airspeed_2eproto();
void protobuf_AssignDesc_Airspeed_2eproto();
void protobuf_ShutdownFile_Airspeed_2eproto();

class Airspeed;

// ===================================================================

class Airspeed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.msgs.Airspeed) */ {
 public:
  Airspeed();
  virtual ~Airspeed();

  Airspeed(const Airspeed& from);

  inline Airspeed& operator=(const Airspeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Airspeed& default_instance();

  void Swap(Airspeed* other);

  // implements Message ----------------------------------------------

  inline Airspeed* New() const { return New(NULL); }

  Airspeed* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Airspeed& from);
  void MergeFrom(const Airspeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Airspeed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time_usec = 1;
  bool has_time_usec() const;
  void clear_time_usec();
  static const int kTimeUsecFieldNumber = 1;
  ::google::protobuf::int64 time_usec() const;
  void set_time_usec(::google::protobuf::int64 value);

  // required double diff_pressure = 2;
  bool has_diff_pressure() const;
  void clear_diff_pressure();
  static const int kDiffPressureFieldNumber = 2;
  double diff_pressure() const;
  void set_diff_pressure(double value);

  // @@protoc_insertion_point(class_scope:sensor_msgs.msgs.Airspeed)
 private:
  inline void set_has_time_usec();
  inline void clear_has_time_usec();
  inline void set_has_diff_pressure();
  inline void clear_has_diff_pressure();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_usec_;
  double diff_pressure_;
  friend void  protobuf_AddDesc_Airspeed_2eproto();
  friend void protobuf_AssignDesc_Airspeed_2eproto();
  friend void protobuf_ShutdownFile_Airspeed_2eproto();

  void InitAsDefaultInstance();
  static Airspeed* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Airspeed

// required int64 time_usec = 1;
inline bool Airspeed::has_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Airspeed::set_has_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Airspeed::clear_has_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Airspeed::clear_time_usec() {
  time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_time_usec();
}
inline ::google::protobuf::int64 Airspeed::time_usec() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Airspeed.time_usec)
  return time_usec_;
}
inline void Airspeed::set_time_usec(::google::protobuf::int64 value) {
  set_has_time_usec();
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Airspeed.time_usec)
}

// required double diff_pressure = 2;
inline bool Airspeed::has_diff_pressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Airspeed::set_has_diff_pressure() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Airspeed::clear_has_diff_pressure() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Airspeed::clear_diff_pressure() {
  diff_pressure_ = 0;
  clear_has_diff_pressure();
}
inline double Airspeed::diff_pressure() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.msgs.Airspeed.diff_pressure)
  return diff_pressure_;
}
inline void Airspeed::set_diff_pressure(double value) {
  set_has_diff_pressure();
  diff_pressure_ = value;
  // @@protoc_insertion_point(field_set:sensor_msgs.msgs.Airspeed.diff_pressure)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace sensor_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Airspeed_2eproto__INCLUDED
