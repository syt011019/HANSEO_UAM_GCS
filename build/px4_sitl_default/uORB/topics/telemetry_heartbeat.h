/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file telemetry_heartbeat.msg */


#pragma once


#include <uORB/uORB.h>


#ifndef __cplusplus
#define TELEMETRY_HEARTBEAT_COMP_ID_ALL 0
#define TELEMETRY_HEARTBEAT_COMP_ID_AUTOPILOT1 1
#define TELEMETRY_HEARTBEAT_COMP_ID_TELEMETRY_RADIO 68
#define TELEMETRY_HEARTBEAT_COMP_ID_CAMERA 100
#define TELEMETRY_HEARTBEAT_COMP_ID_GIMBAL 154
#define TELEMETRY_HEARTBEAT_COMP_ID_LOG 155
#define TELEMETRY_HEARTBEAT_COMP_ID_ADSB 156
#define TELEMETRY_HEARTBEAT_COMP_ID_OSD 157
#define TELEMETRY_HEARTBEAT_COMP_ID_PERIPHERAL 158
#define TELEMETRY_HEARTBEAT_COMP_ID_FLARM 160
#define TELEMETRY_HEARTBEAT_COMP_ID_MISSIONPLANNER 190
#define TELEMETRY_HEARTBEAT_COMP_ID_OBSTACLE_AVOIDANCE 196
#define TELEMETRY_HEARTBEAT_COMP_ID_VISUAL_INERTIAL_ODOMETRY 197
#define TELEMETRY_HEARTBEAT_COMP_ID_PAIRING_MANAGER 198
#define TELEMETRY_HEARTBEAT_COMP_ID_UDP_BRIDGE 240
#define TELEMETRY_HEARTBEAT_COMP_ID_UART_BRIDGE 241
#define TELEMETRY_HEARTBEAT_COMP_ID_TUNNEL_NODE 242
#define TELEMETRY_HEARTBEAT_TYPE_GENERIC 0
#define TELEMETRY_HEARTBEAT_TYPE_ANTENNA_TRACKER 5
#define TELEMETRY_HEARTBEAT_TYPE_GCS 6
#define TELEMETRY_HEARTBEAT_TYPE_ONBOARD_CONTROLLER 18
#define TELEMETRY_HEARTBEAT_TYPE_GIMBAL 26
#define TELEMETRY_HEARTBEAT_TYPE_ADSB 27
#define TELEMETRY_HEARTBEAT_TYPE_CAMERA 30
#define TELEMETRY_HEARTBEAT_TYPE_CHARGING_STATION 31
#define TELEMETRY_HEARTBEAT_STATE_UNINIT 0
#define TELEMETRY_HEARTBEAT_STATE_BOOT 1
#define TELEMETRY_HEARTBEAT_STATE_CALIBRATING 2
#define TELEMETRY_HEARTBEAT_STATE_STANDBY 3
#define TELEMETRY_HEARTBEAT_STATE_ACTIVE 4
#define TELEMETRY_HEARTBEAT_STATE_CRITICAL 5
#define TELEMETRY_HEARTBEAT_STATE_EMERGENCY 6
#define TELEMETRY_HEARTBEAT_STATE_POWEROFF 7
#define TELEMETRY_HEARTBEAT_STATE_FLIGHT_TERMINATION 8

#endif


#ifdef __cplusplus
struct __EXPORT telemetry_heartbeat_s {
#else
struct telemetry_heartbeat_s {
#endif
	uint64_t timestamp;
	uint8_t system_id;
	uint8_t component_id;
	uint8_t type;
	uint8_t state;
	uint8_t _padding0[4]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t COMP_ID_ALL = 0;
	static constexpr uint8_t COMP_ID_AUTOPILOT1 = 1;
	static constexpr uint8_t COMP_ID_TELEMETRY_RADIO = 68;
	static constexpr uint8_t COMP_ID_CAMERA = 100;
	static constexpr uint8_t COMP_ID_GIMBAL = 154;
	static constexpr uint8_t COMP_ID_LOG = 155;
	static constexpr uint8_t COMP_ID_ADSB = 156;
	static constexpr uint8_t COMP_ID_OSD = 157;
	static constexpr uint8_t COMP_ID_PERIPHERAL = 158;
	static constexpr uint8_t COMP_ID_FLARM = 160;
	static constexpr uint8_t COMP_ID_MISSIONPLANNER = 190;
	static constexpr uint8_t COMP_ID_OBSTACLE_AVOIDANCE = 196;
	static constexpr uint8_t COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197;
	static constexpr uint8_t COMP_ID_PAIRING_MANAGER = 198;
	static constexpr uint8_t COMP_ID_UDP_BRIDGE = 240;
	static constexpr uint8_t COMP_ID_UART_BRIDGE = 241;
	static constexpr uint8_t COMP_ID_TUNNEL_NODE = 242;
	static constexpr uint8_t TYPE_GENERIC = 0;
	static constexpr uint8_t TYPE_ANTENNA_TRACKER = 5;
	static constexpr uint8_t TYPE_GCS = 6;
	static constexpr uint8_t TYPE_ONBOARD_CONTROLLER = 18;
	static constexpr uint8_t TYPE_GIMBAL = 26;
	static constexpr uint8_t TYPE_ADSB = 27;
	static constexpr uint8_t TYPE_CAMERA = 30;
	static constexpr uint8_t TYPE_CHARGING_STATION = 31;
	static constexpr uint8_t STATE_UNINIT = 0;
	static constexpr uint8_t STATE_BOOT = 1;
	static constexpr uint8_t STATE_CALIBRATING = 2;
	static constexpr uint8_t STATE_STANDBY = 3;
	static constexpr uint8_t STATE_ACTIVE = 4;
	static constexpr uint8_t STATE_CRITICAL = 5;
	static constexpr uint8_t STATE_EMERGENCY = 6;
	static constexpr uint8_t STATE_POWEROFF = 7;
	static constexpr uint8_t STATE_FLIGHT_TERMINATION = 8;

#endif
};

/* register this as object request broker structure */
ORB_DECLARE(telemetry_heartbeat);


#ifdef __cplusplus
void print_message(const telemetry_heartbeat_s& message);
#endif
